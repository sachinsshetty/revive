ext {
    group = 'com.slabstech.revive'

    version = '0.0.1'

    dockerRepo = 'slabstech'
}

subprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
}


// Create the docker images here, uses prebuild as multi-part images
task createClientImageReactJS(type: Exec) {
    dependsOn ":clients:reactjs:buildReactApp"
    commandLine 'docker', 'build', '--rm', '.', '-t', "${dockerRepo}/${rootProject.name}-client-reactjs", "--network" ,"host", "-f", "docker/client/reactjs/Dockerfile"
}

task createServerBuildSpringBoot(type: Exec) {
    dependsOn ":servers:spring_boot:copyDependencies", ":servers:spring_boot:build"
    commandLine 'echo', 'SpringBoot Server Build Successful'
}

task createServerImageSpringBoot(type: Exec) {
    commandLine 'docker', 'build', '--rm', '.', '-t', "${dockerRepo}/${rootProject.name}-server-spring-boot",  "--network" ,"host", "-f", "docker/server/spring_boot/Dockerfile"
}

task createServerBuildDropwizard(type: Exec) {
    dependsOn ":servers:dropwizard:copyDependencies", ":servers:dropwizard:build"
    commandLine 'echo', 'Dropwizard Server Build Successful'
}

task createServerImageDropwizard(type: Exec) {
    commandLine 'docker', 'build', '--rm', '.', '-t', "${dockerRepo}/${rootProject.name}-server-dropwizard",  "--network" ,"host", "-f", "docker/server/dropwizard/Dockerfile"
}

task createDBImagePostgreSQL(type: Exec) {
    commandLine 'docker', 'build', '--rm', '.', '-t', "${dockerRepo}/${rootProject.name}-db-postgresql", "-f", "docker/db/postgresql/Dockerfile"
}

task createAppDockerImages_springboot(type: Exec) {
    dependsOn "createDBImagePostgreSQL", "createServerImageSpringBoot", "createClientImageReactJS"
    commandLine 'echo', 'success create images'
}

task createAppImages_dropwizard(type: Exec) {
    dependsOn "createDBImagePostgreSQL", "createServerImageDropwizard", "createClientImageReactJS"
    commandLine 'echo', 'success create images'
}


task buildAllTasks(type: Exec) {
    dependsOn createServerBuildSpringBoot, createServerBuildDropwizard, ":clients:reactjs:buildReactApp"
    commandLine 'echo', 'Building all frameworks'

}

task runSpringBootServer(type: Exec){
    dependsOn(createServerBuildSpringBoot)
    commandLine('gradle', ':servers:spring_boot:bootRun')
}

task runReactJSClient(type: Exec){
    dependsOn(":clients:reactjs:runClient")
    commandLine('echo', 'ReactJS Clieht Started')
}

task runDropWizardServer(type: Exec){
    dependsOn(":server:dropwizard:runDropwizard")
    commandLine('echo' , 'Running Dropwizard Server')
}


task createAllImages(type: Exec){

    dependsOn buildAllTasks
    // Server
    commandLine 'docker', 'build', '--rm', '.', '-t', "${dockerRepo}/${rootProject.name}-server-dropwizard",  "--network" ,"host", "-f", "docker/server/dropwizard/Dockerfile"

    commandLine 'docker', 'build', '--rm', '.', '-t', "${dockerRepo}/${rootProject.name}-server-spring-boot",  "--network" ,"host", "-f", "docker/server/spring_boot/Dockerfile"

    // Client

    commandLine 'docker', 'build', '--rm', '.', '-t', "${dockerRepo}/${rootProject.name}-client-reactjs", "--network" ,"host", "-f", "docker/client/reactjs/Dockerfile"

    // DB 
    commandLine 'docker', 'build', '--rm', '.', '-t', "${dockerRepo}/${rootProject.name}-db-postgresql", "-f", "docker/db/postgresql/Dockerfile"
}


task buildChess(type: Exec){
    dependsOn createServerBuildDropwizard
    commandLine('cp', 'servers/dropwizard/build/libs/app-0.0.1.jar', 'chess/app-0.0.1.jar')
    commandLine('cp', 'servers/dropwizard/config.yml', 'chess/config.yml')
}

task runChess(type: Exec){
    dependsOn buildChess
    commandLine('java', '-jar', 'chess/app-0.0.1.jar', 'server' , 'chess/config.yml')
}
