plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.github.node-gradle.node" version "3.0.1"
	id 'java'
	id 'eclipse'
}

archivesBaseName = 'revive'

group = 'slabs.tech.avti'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
}


springBoot {
	mainClass = 'slabs.tech.avti.Application'
}

tasks.named("bootRun") {
	mainClass = 'slabs.tech.avti.Application'
}


dependencies {

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-cache"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation "io.rest-assured:rest-assured"
	implementation "javax.servlet:javax.servlet-api:4.0.0"

	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	runtimeOnly 'org.postgresql:postgresql'

}
node {
    version = '16.15.0'
    download = true
    npmVersion = ""
}

task buildReactApp(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/webpack/bin/webpack.js')
    args = [
            '--mode', 'development',
            '--entry', './src/main/webapp/src/Home.js',
            '-o', './src/main/resources/static/dist'
    ]
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/lib"
}

// creates your manifest file within the JAR
jar {
    manifest {
        attributes["Main-Class"] = "slabs.tech.avti.Application"
        attributes["Class-Path"] = configurations.runtimeClasspath.collect { 'lib/' + it.getName() }.join(' ')
    }
}


task buildDocker(type: Exec) {
    dependsOn copyDependencies, build, buildReactApp
    workingDir "$projectDir"
    commandLine 'docker', 'build', '--rm', '.', '-t', "$project.group/$project.name:$project.version", "-f", "$projectDir/src/main/docker/Dockerfile"
}

task runDocker(type: Exec) {
    dependsOn buildDocker
    workingDir "$projectDir"
    commandLine 'docker', 'run', "$project.group/$project.name:$project.version"
}

processResources.dependsOn 'buildReactApp'
clean.delete << file('node_modules')
clean.delete << file('src/main/resources/static/dist')